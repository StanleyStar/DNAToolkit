# DNA toolkit/code testing file

from ValidateAndCountNucleotides import *
from Structures import *

# Let's validate our DNA sequence
rndDNAstr = "AtccGTTAC"
print(validateSeq(rndDNAstr))
errorDNAstr = "AtccGTTACX"
print(validateSeq(errorDNAstr))

# How can we generate random sequences?! Let's create a random DNA sequence for testing
import random
randDNAStr = ''.join([random.choice(Nucleotides)
                      for nuc in range(20)])
print(validateSeq(randDNAStr))

# Testing the nucleotide count function
print(countNucFrequency(randDNAStr))

# To make sure that you are counting the validated sequence, do this:
DNAstr = validateSeq(rndDNAstr)
print(countNucFrequency(DNAstr))

# To convert DNA string to RNA
from TranscriptionAndReverseComplement import *
print(transcription(DNAstr))

# Reverse complement
print(reverse_complement(DNAstr))
print(new_reverse_complement(DNAstr))

# GC content calculation
from GCContentCalculation import *
print("GC Content is:",  gc_content(DNAstr),"%")

# GC content in subsection
print("GC Content in subsection k=5:", gc_content_subsec(DNAstr, k=5))

# To translate DNAs to aminoacids
from TranslationAndCodonUsage import *
NewDNAstr = "ACCTAGATATAGACATAGGGCTTCGATATGCGTCTCTGGCTCTGGATATATGGGCCTCGATAGCTAGATCGATGGATGGGAAGT"
print("Aminoacids sequence from DNA:", translate_seq(NewDNAstr, 0))

# Codon frequency calculation (ie codon usage)
print("Codon frequency (L):", codon_usage(NewDNAstr, "L"))

# Generating ORF
from OpenReadingFrames import *

print("Reading frames:")
for frame in gen_reading_frames(NewDNAstr):
   print(frame)

# Searching proteins in ORF
from ProteinSearchInORF import *
test_rf = ['T', '_', 'I', '_', 'T', '_', 'G', 'F', 'D', 'M', 'R', 'L', 'W',
           'L', 'W', 'I', 'Y', 'G', 'P', 'R', '_', 'L', 'D', 'R', 'W', 'M', 'G', 'S']
print(proteins_from_rf(test_rf))

# Search for proteins in ORF
print("All proteins in the 6 ORFs: ")
for prot in all_proteins_from_orfs(NewDNAstr, 0, 0, True):
    print(prot)

# Working with real data from NCBI
print("All proteins in the 6 ORFs: ")
for prot in all_proteins_from_orfs(NC_000011_10, 0, 0, True):
    print(prot)
